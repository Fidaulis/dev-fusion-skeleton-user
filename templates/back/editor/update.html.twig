{% trans_default_domain 'back_messages' %}
{% extends "back/layout.html.twig" %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.min.css"/>
    <link rel="stylesheet" href="/elfinder/css/elfinder.min.css"    type="text/css">
{% endblock %}
{% block title %}{{ 'editor.update.title'|trans() }}{% endblock %}

{% block content %}
<section class="pt-4 pb-4">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h1 class="h3">{{ 'editor.update.h1'|trans() }}</h1>
            </div>
            <div class="col-sm-6 text-right">
                <p>
                    
                </p>
            </div>
        </div>
        <hr>
        <div class="card mt-4 mb-4">
            <div class="card-body">
                <h2 class="card-title">{{ 'editor.update.h2'|trans() }}</h2>
                <div class="card-content p-2 mb-4">
                    {% form_theme form 'form/jquery.collection.html.twig' %}
                    {{ form_start(form) }}
                        {{ form_row(form.editors) }}
                        <button class="btn btn-primary btn-block">
                            <i class="far fa-paper-plane"></i> {{ 'button.save'|trans() }}
                        </button>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    
    <script src="{{ asset('js/jquery.collection.js') }}"></script>
    <script src="/ckeditor/translations/fr.js"></script>
    <script src="/ckeditor/ckeditor.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
    <script src="/elfinder/js/elfinder.min.js"></script>
    
    <script type="text/javascript">
        $('.collection-selector').collection({
            position_field_selector: '.position',
            init_with_n_elements: 1,
            min: 1,
            add_at_the_end: false,
            allow_down: true,
            allow_up: true,
            add: '<a href="#" class="btn btn-primary mx-2 my-2" title="{{ 'button.add'|trans() }}" aria-label="{{ 'button.add'|trans() }}" role="button"><i class="fas fa-plus"></i></a>',
            remove: '<a href="#" class="btn btn-primary mx-2 my-2" title="{{ 'button.remove'|trans() }}" aria-label="{{ 'button.remove'|trans() }}" role="button"><i class="fas fa-trash"></i></a>',
            up: '<a href="#" class="btn btn-primary mx-2 my-2" title="{{ 'button.up'|trans() }}" aria-label="{{ 'button.up'|trans() }}" role="button"><i class="fas fa-arrow-up"></i></a>',
            down: '<a href="#" class="btn btn-primary mx-2 my-2" title="{{ 'button.down'|trans() }}" aria-label="{{ 'button.down'|trans() }}" role="button"><i class="fas fa-arrow-down"></i></a>',
            after_init: function (collection, element) {
                collection.each((index, elm) => {
                    $(elm).find('textarea').each((index, elm) => {
                        if (!$(elm).attr('editor')) {
                            createClassicEditor(elm.id);
                        }
                    });
                });
            },
            after_add: function (collection, element) {
                createClassicEditor(element[0].elements[2].id);
                return true;
            }
        });
        
        
        // Add CKEditor function
    
        // elfinder folder hash of the destination folder to be uploaded in this CKeditor 5
        
        const uploadTargetHash = 'l1_Lw';

        // elFinder connector URL
        const connectorUrl = '/elfinder/connector';

        // To create CKEditor 5 classic editor
        
        function createClassicEditor(id) {
            var textarea = document.querySelector('#' + id);
            textarea.setAttribute('editor', true);
            ClassicEditor
            .create(textarea, {
                    language: {
                        ui: 'fr',
                        content: 'fr'
                    },
                    toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'imageUpload', 'ckfinder', 'blockQuote', 'insertTable', 'mediaEmbed', 'undo', 'redo']
                } )
                .then(editor => {
                    const ckf = editor.commands.get('ckfinder'),
                        fileRepo = editor.plugins.get('FileRepository'),
                        ntf = editor.plugins.get('Notification'),
                        i18 = editor.locale.t,
                        // Insert images to editor window
                        insertImages = urls => {
                            const imgCmd = editor.commands.get('imageUpload');
                            if (!imgCmd.isEnabled) {
                                ntf.showWarning(i18('Could not insert image at the current position.'), {
                                    title: i18('Inserting image failed'),
                                    namespace: 'ckfinder'
                                });
                                return;
                            }
                            editor.execute('imageInsert', { source: urls });
                        },
                        // To get elFinder instance
                        getfm = open => {
                            return new Promise((resolve, reject) => {
                                // Execute when the elFinder instance is created
                                const done = () => {
                                    if (open) {
                                        // request to open folder specify
                                        if (!Object.keys(_fm.files()).length) {
                                            // when initial request
                                            _fm.one('open', () => {
                                                _fm.file(open)? resolve(_fm) : reject(_fm, 'errFolderNotFound');
                                            });
                                        } else {
                                            // elFinder has already been initialized
                                            new Promise((res, rej) => {
                                                if (_fm.file(open)) {
                                                    res();
                                                } else {
                                                    // To acquire target folder information
                                                    _fm.request({cmd: 'parents', target: open}).done(e =>{
                                                        _fm.file(open)? res() : rej();
                                                    }).fail(() => {
                                                        rej();
                                                    });
                                                }
                                            }).then(() => {
                                                // Open folder after folder information is acquired
                                                _fm.exec('open', open).done(() => {
                                                    resolve(_fm);
                                                }).fail(err => {
                                                    reject(_fm, err? err : 'errFolderNotFound');
                                                });
                                            }).catch((err) => {
                                                reject(_fm, err? err : 'errFolderNotFound');
                                            });
                                        }
                                    } else {
                                        // show elFinder manager only
                                        resolve(_fm);
                                    }
                                };

                                // Check elFinder instance
                                if (_fm) {
                                    // elFinder instance has already been created
                                    done();
                                } else {
                                    // To create elFinder instance
                                    _fm = $('<div/>').dialogelfinder({
                                        // dialog title
                                        title : 'File Manager',
                                        // connector URL
                                        url : connectorUrl,
                                        // start folder setting
                                        startPathHash : open? open : void(0),
                                        // Set to do not use browser history to un-use location.hash
                                        useBrowserHistory : false,
                                        // Disable auto open
                                        autoOpen : false,
                                        // elFinder dialog width
                                        width : '80%',
                                        // set getfile command options
                                        commandsOptions : {
                                            getfile: {
                                                oncomplete : 'close',
                                                multiple : true
                                            }
                                        },
                                        // Insert in CKEditor when choosing files
                                        getFileCallback : (files, fm) => {
                                            let imgs = [];
                                            fm.getUI('cwd').trigger('unselectall');
                                            $.each(files, function(i, f) {
                                                if (f && f.mime.match(/^image\//i)) {
                                                    imgs.push(fm.convAbsUrl(f.url));
                                                } else {
                                                    editor.execute('link', fm.convAbsUrl(f.url));
                                                }
                                            });
                                            if (imgs.length) {
                                                insertImages(imgs);
                                            }
                                        }
                                    }).elfinder('instance');
                                    done();
                                }
                            });
                        };

                    // elFinder instance
                    let _fm;

                    if (ckf) {
                        // Take over ckfinder execute()
                        ckf.execute = () => {
                            getfm().then(fm => {
                                fm.getUI().dialogelfinder('open');
                            });
                        };
                    }

                    // Make uploader
                    const uploder = function(loader) {
                        let upload = function(file, resolve, reject) {
                            getfm(uploadTargetHash).then(fm => {
                                let fmNode = fm.getUI();
                                fmNode.dialogelfinder('open');
                                fm.exec('upload', {files: [file], target: uploadTargetHash}, void(0), uploadTargetHash)
                                    .done(data => {
                                        if (data.added && data.added.length) {
                                            fm.url(data.added[0].hash, { async: true }).done(function(url) {
                                                resolve({
                                                    'default': fm.convAbsUrl(url)
                                                });
                                                fmNode.dialogelfinder('close');
                                            }).fail(function() {
                                                reject('errFileNotFound');
                                            });
                                        } else {
                                            reject(fm.i18n(data.error? data.error : 'errUpload'));
                                            fmNode.dialogelfinder('close');
                                        }
                                    })
                                    .fail(err => {
                                        const error = fm.parseError(err);
                                        reject(fm.i18n(error? (error === 'userabort'? 'errAbort' : error) : 'errUploadNoFiles'));
                                    });
                            }).catch((fm, err) => {
                                const error = fm.parseError(err);
                                reject(fm.i18n(error? (error === 'userabort'? 'errAbort' : error) : 'errUploadNoFiles'));
                            });
                        };

                        this.upload = function() {
                            return new Promise(function(resolve, reject) {
                                if (loader.file instanceof Promise || (loader.file && typeof loader.file.then === 'function')) {
                                    loader.file.then(function(file) {
                                        upload(file, resolve, reject);
                                    });
                                } else {
                                    upload(loader.file, resolve, reject);
                                }
                            });
                        };
                        this.abort = function() {
                            _fm && _fm.getUI().trigger('uploadabort');
                        };
                    };

                    // Set up image uploader
                    fileRepo.createUploadAdapter = loader => {
                        return new uploder(loader);
                    };
                })
                .catch(error => {
                    console.error( error );
                });
        }
    </script>
{% endblock %}